program     → declaration* EOF ;

declaration → funDecl
            | varDecl
            | statement ;

funDecl     → "fun" function ;
function    → IDENTIFIER "(" parameters? ")" block ;
parameters  → IDENTIFIER ( "," IDENTIFIER )* ;

varDecl     → "var" IDENTIFIER ( "=" expression )? ";" ;

statement   → exprStmt
            | printStmt
            | block
            | ifStmt
            | whileStmt
            | forStmt
            | returnStmt ;

exprStmt    → expression ";" ;
printStmt   → "print" expression ";" ;
returnStmt  → "return" expression? ";" ;
block       → "{" declaration* "}" ;

ifStmt      → "if" "(" expression ")" statement ( "else" statement )? ;
whileStmt   → "while" "(" expression ")" statement ;
forStmt     → "for" "(" ( varDecl | exprStmt | ";" )
                      expression? ";"
                      expression? ")" statement ;

expression  → assignment ;
assignment  → IDENTIFIER "=" assignment
            | logic_or ;

logic_or    → logic_and ( "or" logic_and )* ;
logic_and   → equality ( "and" equality )* ;

equality    → comparison ( ( "!=" | "==" ) comparison )* ;
comparison  → term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term        → factor ( ( "-" | "+" ) factor )* ;
factor      → unary ( ( "/" | "*" ) unary )* ;
unary       → ( "!" | "-" ) unary
            | funExpr
            | call ;

funExpr     → "fun" "(" parameters? ")" block ;

call        → primary ( "(" arguments? ")" )* ;
arguments   → expression ( "," expression )* ;

primary     → "true" | "false" | "nil"
            | NUMBER | STRING
            | IDENTIFIER
            | "(" expression ")" ;
